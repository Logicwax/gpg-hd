#!/usr/bin/env python

# Special thanks to Arttu Kasvio's idea of using pem2openpgp / HMAC_DRBG

import os
import subprocess
import sys
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA256
import ptyprocess
import pexpect
import hashlib
from hmac_drbg import *
import argparse

gpg_cmdline = "gpg --homedir temp --keyring trustedkeys.gpg --no-default-keyring --expert "
subkey_cmdline = " --command-fd=0 --status-fd=1 --pinentry-mode=loopback --edit-key "

def GPG_get_masterkey():
  id = subprocess.Popen(gpg_cmdline + "--list-keys | " \
    "tail -n +3 | awk \'{ print $1 }\' | grep -v \"pub\" | grep -v \"uid\" | tr -s \'\\n\' \'\\n\'", \
    stdout=subprocess.PIPE, \
    stdin=subprocess.PIPE, \
    shell=True \
    )
  return id.communicate()[0]


def GPG_get_keygrips():
  # Get keygrips
  kg = subprocess.Popen(gpg_cmdline + \
    "--with-keygrip -K | grep \"Keygrip\" | awk \'{ print $3 }\'", \
    stdout=subprocess.PIPE, \
    stdin=subprocess.PIPE, \
    shell=True \
    )
  return kg.communicate()[0]


def GPG_set_primary_key(keyID, timestamp):
  # Set masterkey as primary
  child = pexpect.spawn( \
    "bash -c \"{ echo uid 1; echo primary; echo q; echo y; echo y; } | " \
    + gpg_cmdline + "--faked-system-time=" + timestamp + subkey_cmdline + keyID \
    )
  child.interact()


def GPG_add_auth_subkey(parent_keyID, subkey_grip, timestamp):
  # Auth subkey
  child = pexpect.spawn( \
    "bash -c \"{ echo addkey; echo 13; echo S; echo E; echo A; echo Q; echo 0; echo save; } | " \
    + gpg_cmdline + "--faked-system-time=" + timestamp + subkey_cmdline + parent_keyID \
    )
  child.expect (["Enter the keygrip: ",  pexpect.EOF, pexpect.TIMEOUT])
  child.send(subkey_grip + "\r")
  child.interact()


def GPG_add_enc_subkey(parent_keyID, subkey_grip, timestamp):
  # Enc subkey
  child = pexpect.spawn( \
    "bash -c \"{ echo addkey; echo 13; echo S; echo Q; echo 0; echo save; } | " \
    + gpg_cmdline + "--faked-system-time=" + timestamp + subkey_cmdline + parent_keyID \
    )
  child.expect (["Enter the keygrip: ", pexpect.EOF, pexpect.TIMEOUT])
  child.send(subkey_grip + "\r")
  child.interact()


def GPG_add_sig_subkey(parent_keyID, subkey_grip, timestamp):
  # Sig subkey
  child = pexpect.spawn( \
    "bash -c \"{ echo addkey; echo 13; echo E; echo Q; echo 0; echo save; } | " \
    + gpg_cmdline + "--faked-system-time="  + timestamp + subkey_cmdline + parent_keyID \
    )
  child.expect (["Enter the keygrip: ", pexpect.EOF, pexpect.TIMEOUT])
  child.send(subkey_grip + "\r")
  child.interact()


def GPG_import_keychain(keychain_filename):
    gpg_import = subprocess.Popen(gpg_cmdline + "--import " + keychain_filename, stdout=subprocess.PIPE, shell=True)
    print(gpg_import.communicate())


def GPG_create_key(user_id, seed, timestamp):
  # Create deterministic raw GPG key
  rand = DRBG(hashlib.sha256(seed).digest())
  rsa_key = RSA.generate(4096, rand.generate)

  # Since we're auto-generating the key, default the creation time to UNIX time of (timeStamp)
  os.environ['PEM2OPENPGP_TIMESTAMP'] = timestamp
  # pem2openpgp "Foo Bar <fbar@linux.net>" < priv.pem | gpg --import
  pem2openpgp = subprocess.Popen(['pem2openpgp', user_id], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
  gpg_key = pem2openpgp.communicate(rsa_key.exportKey(pkcs=1))[0]

  os.system("mkdir -p temp && chmod 700 -R temp")
  os.environ['GNUPGHOME'] = "temp"

  # Import openPGP-formatted RSA key into GPG keychain
  gpg_import = subprocess.Popen(gpg_cmdline + "--import", stdin=subprocess.PIPE, shell=True)
  gpg_import.communicate(gpg_key)


def GPG_export_keychain(keyID, private_filename, public_filename, ssh_filename):
  # Export full private keychain to file
  gpg_export = subprocess.Popen(gpg_cmdline + "--armor --export-secret-keys " + keyID, \
    stdout=subprocess.PIPE, shell=True)
  privateKeyChain = gpg_export.communicate()[0]
  keyChainfile = open(private_filename, "w")
  keyChainfile.write(privateKeyChain)
  keyChainfile.close()

  # Export full public keychain to file
  export = subprocess.Popen(gpg_cmdline + "--armor --export " + keyID, stdout=subprocess.PIPE, shell=True)
  publicKeyChain = export.communicate()[0]
  keyChainfile = open(public_filename, "w")
  keyChainfile.write(publicKeyChain)
  keyChainfile.close()

  # Export SSH public key to file
  export = subprocess.Popen(gpg_cmdline + "--export-ssh-key " + keyID, stdout=subprocess.PIPE, shell=True)
  ssh_key = export.communicate()[0]
  sshfile = open(ssh_filename, "w")
  sshfile.write(ssh_key)
  sshfile.close()


def GPG_card_write(keyID):
  cmd_line = gpg_cmdline + "--command-fd=0 --status-fd=1 --edit-key " + keyID

  #Write Auth key to card
  child = pexpect.spawn("bash -c \"{ echo key 1; echo keytocard; echo 3; echo y; } | " + cmd_line)
  child.interact()

  #Write Enc key to card
  child = pexpect.spawn("bash -c \"{ echo key 2; echo keytocard; echo 2; echo y; } | " + cmd_line)
  child.interact()

  #Write Sig key to card
  child = pexpect.spawn("bash -c \"{ echo key 3; echo keytocard; echo 1; echo y; } | " + cmd_line)
  child.interact()


if __name__ == '__main__':
  os.system("rm -rf temp *.asc keys/* > /dev/null 2>&1")
  os.system("killall gpg-agent scdaemon ssh-agent > /dev/null 2>&1")
  print("\n")
  parser = argparse.ArgumentParser()
  parser.add_argument("seed_phrase", type=str, help="Seed value or BIP39 phrase")
  parser.add_argument("-n", "--name", help="Full Name")
  parser.add_argument("-e", "--email", help="Email")
  parser.add_argument("-d", "--date", help="Key creation timestamp (in unix epoch time)")
  parser.add_argument("-c", "--card", help="Write subkeys to Yubikey", action="store_true")
  args = parser.parse_args()

  if (args.name):
    name = args.name
  else:
    name = raw_input('Name: ')
  if (args.email):
    email = args.email
  else:
    email = raw_input('Email: ')
  if (args.date):
    if(args.date == "0"):
      print("Timestamp of 0 is not valid, please choose at least 1")
    timestamp = args.date
  else:
    # GPG / yubikeys won't allow adding subkeys keytocard with timestamp of unix epoch 0
    # We will use timestamp of 1 (A second into 1970-01-01) to indicate this is GPG-HD generated keys
    timestamp = "1";
  card_write = False
  if (args.card):
    card_write = True
  else:
    # Assume if they forget name or email, they probably should be asked about writing to cards
    if (not args.email or not args.name):
      if(raw_input('Write keys to card? [y/n]: ') == 'y'):
        card_write = True
  if (args.seed_phrase):
    seed = args.seed_phrase
  else:
    seed = raw_input('Seed: ')
  user_id = '%s <%s>' % (name, email)

  # CA masterkey is sha256 of input seed, and the three subkeys are recursive sha256 hashes of that
  masterkey_hash = hashlib.sha256(seed.encode()).hexdigest()
  authkey_hash = hashlib.sha256(masterkey_hash).hexdigest()
  enckey_hash = hashlib.sha256(authkey_hash).hexdigest()
  sigkey_hash = hashlib.sha256(enckey_hash).hexdigest()

  # Create master CA key
  GPG_create_key(user_id, masterkey_hash, timestamp)
  masterkeyID = GPG_get_masterkey()

  # Create 3 subkeys
  GPG_create_key(user_id, authkey_hash, timestamp)
  GPG_create_key(user_id, enckey_hash, timestamp)
  GPG_create_key(user_id, sigkey_hash, timestamp)

  # GPG needs grips for moving to subkeys
  keygrips = GPG_get_keygrips()

  # Assemble the keychain
  GPG_set_primary_key(masterkeyID, timestamp)
  GPG_add_auth_subkey(masterkeyID, keygrips.split('\n')[1], timestamp)
  GPG_add_enc_subkey(masterkeyID, keygrips.split('\n')[2], timestamp)
  GPG_add_sig_subkey(masterkeyID, keygrips.split('\n')[3], timestamp)

  os.system("mkdir -p keys")
  keys_path = os.path.join(os.path.dirname(__file__) , "keys")
  GPG_export_keychain(masterkeyID, \
    os.path.join(keys_path, "private_keychain.asc"), \
    os.path.join(keys_path, "public_keychain.asc"), \
    os.path.join(keys_path, "ssh_key.asc") \
    )

  # GPG is lame and doesn't like when we remove old keyIDs that are now attached to subkeys,
  # so lets start over with fresh keydb
  os.system("rm -rf temp && mkdir -p temp && chmod 700 -R temp")
  os.environ['GNUPGHOME'] = "temp"

  GPG_import_keychain(os.path.join(keys_path, "private_keychain.asc"))

  # just for show...
  print("\n\n\n")
  gpg_list = subprocess.Popen(gpg_cmdline + "--list-keys", shell=True)
  gpg_list.communicate()
  print("\n")
  print(os.path.join(keys_path, "private_keychain.asc") + " Created\n")
  print(os.path.join(keys_path, "public_keychain.asc") + " Created\n")
  print(os.path.join(keys_path, "ssh_key.asc") + " Created\n")

  if(card_write):
    GPG_card_write(masterkeyID)

  os.system("rm -rf temp")
